// Async Music Generation for Vercel (handles timeouts)
const fetch = require('node-fetch');
const Replicate = require('replicate');
const ReplicateCreditSystem = require('./credit-system-replicate');

// Initialize credit system
const creditSystem = new ReplicateCreditSystem();

// Store generation jobs (in production, use a database)
const generationJobs = new Map();

// Start generation job (returns immediately)
async function startGenerationJob(audioData, instrument, duration, userId) {
    const jobId = `job_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    
    // Store job info
    generationJobs.set(jobId, {
        id: jobId,
        status: 'starting',
        userId: userId,
        instrument: instrument,
        duration: duration,
        createdAt: new Date(),
        result: null,
        error: null
    });
    
    // Start generation in background (don't await)
    generateMusicAsync(jobId, audioData, instrument, duration, userId);
    
    return {
        success: true,
        jobId: jobId,
        status: 'started',
        message: 'Generation started. Check status with jobId.',
        checkUrl: `/api/generation-status/${jobId}`
    };
}

// Background generation function
async function generateMusicAsync(jobId, audioData, instrument, duration, userId) {
    try {
        // Update job status
        generationJobs.set(jobId, {
            ...generationJobs.get(jobId),
            status: 'generating'
        });
        
        console.log(`🎵 Starting generation job ${jobId} for user ${userId}`);
        
        if (!process.env.REPLICATE_API_TOKEN) {
            throw new Error('Replicate API token not configured');
        }

        const modelId = "meta/musicgen:671ac645ce5e552cc63a54a2bbff63fcf798043055d2dac5fc9e36a837eedcfb";
        const generationDuration = parseInt(duration) || 10;
        
        // Check credits
        if (!creditSystem.hasEnoughCredits(userId, modelId, generationDuration)) {
            const cost = creditSystem.calculateCost(modelId, generationDuration);
            const userBalance = creditSystem.getUserCredits(userId);
            throw new Error(`Insufficient credits. Need ${cost} credits, have ${userBalance}`);
        }
        
        const replicate = new Replicate({
            auth: process.env.REPLICATE_API_TOKEN,
        });
        
        const prompt = createMusicPrompt(instrument, audioData);
        
        console.log(`🎵 Using Replicate MusicGen model for job ${jobId}...`);
        
        // Use Replicate's MusicGen model
        const output = await replicate.run(modelId, {
            input: {
                model_version: "melody",
                prompt: prompt,
                duration: Math.min(generationDuration, 30),
                input_audio: audioData ? `data:audio/wav;base64,${audioData}` : undefined,
                continuation: false,
                continuation_start: 0,
                continuation_end: 0,
                multi_band_diffusion: false,
                normalization_strategy: "peak",
                top_k: 250,
                top_p: 0,
                temperature: 1,
                classifier_free_guidance: 3,
                output_format: "wav"
            }
        });

        if (!output || !output[0]) {
            throw new Error('No audio generated by Replicate');
        }

        console.log(`🎵 Replicate API request successful for job ${jobId}!`);
        
        // Deduct credits after successful generation
        const creditDeduction = creditSystem.deductCredits(userId, modelId, generationDuration);
        console.log(`💰 Deducted ${creditDeduction.cost} credits ($${(creditDeduction.cost * 0.01).toFixed(2)}) from user ${userId}`);
        
        // Download the generated audio
        const audioUrl = output[0];
        const audioResponse = await fetch(audioUrl);
        if (!audioResponse.ok) {
            throw new Error(`Failed to download audio: ${audioResponse.status}`);
        }
        
        const audioBuffer = await audioResponse.buffer();
        const audioBase64 = Buffer.from(audioBuffer).toString('base64');
        
        // Update job with success
        generationJobs.set(jobId, {
            ...generationJobs.get(jobId),
            status: 'completed',
            result: {
                success: true,
                audioData: audioBase64,
                source: 'Replicate MusicGen',
                creditsUsed: creditDeduction.cost,
                remainingCredits: creditDeduction.newBalance
            },
            completedAt: new Date()
        });
        
        console.log(`✅ Generation job ${jobId} completed successfully!`);
        
    } catch (error) {
        console.error(`❌ Generation job ${jobId} failed:`, error.message);
        
        // Update job with error
        generationJobs.set(jobId, {
            ...generationJobs.get(jobId),
            status: 'failed',
            error: error.message,
            completedAt: new Date()
        });
    }
}

// Create music prompt
function createMusicPrompt(instrument, audioData = null) {
    const basePrompts = {
        piano: 'Generate a beautiful piano melody with classical harmony and emotional depth',
        guitar: 'Create an acoustic guitar arrangement with fingerpicking style and warm tones',
        violin: 'Generate a violin melody with expressive vibrato and classical phrasing',
        synth: 'Create a modern synthesizer track with electronic sounds and analog warmth',
        drums: 'Generate a drum track with kick, snare, hi-hats, and cymbals in a rhythmic pattern',
        bass: 'Create a bass line with deep, sustained notes and rhythmic groove'
    };
    
    let prompt = basePrompts[instrument] || basePrompts.piano;
    
    if (audioData) {
        prompt = `Based on the provided audio input (humming/beatboxing/whistling), generate a ${instrument} arrangement that follows the melody, rhythm, and style of the input. ${prompt}`;
    }
    
    return prompt;
}

// Main API handler
module.exports = async (req, res) => {
    // Set CORS headers
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');
    
    if (req.method === 'OPTIONS') {
        return res.status(200).end();
    }
    
    if (req.method !== 'POST') {
        return res.status(405).json({ error: 'Method not allowed' });
    }
    
    try {
        const { audioData, instrument = 'piano', duration = '10', userId = 'anonymous', confirmed = false } = req.body;
        
        if (!audioData) {
            return res.status(400).json({ error: 'No audio data provided' });
        }
        
        // If not confirmed, return cost estimation
        if (!confirmed) {
            const modelId = "meta/musicgen:671ac645ce5e552cc63a54a2bbff63fcf798043055d2dac5fc9e36a837eedcfb";
            const generationDuration = parseInt(duration) || 10;
            const cost = creditSystem.calculateCost(modelId, generationDuration);
            const userCredits = creditSystem.getUserCredits(userId);
            const hasEnoughCredits = creditSystem.hasEnoughCredits(userId, modelId, generationDuration);
            const userCharge = Math.max(cost + 5, Math.ceil(cost * 1.5));
            
            return res.json({
                success: false,
                requiresConfirmation: true,
                estimation: {
                    duration: generationDuration,
                    instrument: instrument,
                    costToUs: cost,
                    costToUsDollars: (cost * 0.01).toFixed(2),
                    chargeToUser: userCharge,
                    chargeToUserDollars: (userCharge * 0.01).toFixed(2),
                    profit: userCharge - cost,
                    profitDollars: ((userCharge - cost) * 0.01).toFixed(2),
                    profitMargin: cost > 0 ? (((userCharge - cost) / cost) * 100).toFixed(1) : 0
                },
                user: {
                    credits: userCredits,
                    hasEnoughCredits: hasEnoughCredits,
                    canGenerate: hasEnoughCredits
                },
                message: hasEnoughCredits ? 
                    `Ready to generate! Will cost ${userCharge} credits ($${(userCharge * 0.01).toFixed(2)})` :
                    `Insufficient credits. Need ${userCharge} credits, have ${userCredits}. Purchase more credits.`
            });
        }
        
        // Start async generation job
        const result = await startGenerationJob(audioData, instrument, duration, userId);
        return res.json(result);
        
    } catch (error) {
        console.error('Error starting generation:', error);
        return res.status(500).json({ 
            success: false, 
            error: 'Internal server error during generation start.',
            details: error.message 
        });
    }
};

// Get generation status
module.exports.getStatus = async (req, res) => {
    const { jobId } = req.query;
    
    if (!jobId) {
        return res.status(400).json({ error: 'Job ID required' });
    }
    
    const job = generationJobs.get(jobId);
    
    if (!job) {
        return res.status(404).json({ error: 'Job not found' });
    }
    
    res.json({
        jobId: jobId,
        status: job.status,
        userId: job.userId,
        instrument: job.instrument,
        duration: job.duration,
        createdAt: job.createdAt,
        completedAt: job.completedAt,
        result: job.result,
        error: job.error
    });
};
